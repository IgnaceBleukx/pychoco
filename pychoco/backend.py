# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _backend
else:
    import _backend

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def chocosolver_init() -> "void":
    return _backend.chocosolver_init()

def chocosolver_cleanup() -> "void":
    return _backend.chocosolver_cleanup()

def chocosolver_is_initialized() -> "int":
    return _backend.chocosolver_is_initialized()

def create_model(arg1: "char *") -> "void *":
    return _backend.create_model(arg1)

def get_model_name(arg1: "void *") -> "char *":
    return _backend.get_model_name(arg1)

def intvar_sii(arg1: "void *", arg2: "char *", arg3: "int", arg4: "int") -> "void *":
    return _backend.intvar_sii(arg1, arg2, arg3, arg4)

def intvar_ii(arg1: "void *", arg2: "int", arg3: "int") -> "void *":
    return _backend.intvar_ii(arg1, arg2, arg3)

def get_intvar_name(arg1: "void *") -> "char *":
    return _backend.get_intvar_name(arg1)

def get_intvar_lb(arg1: "void *") -> "int":
    return _backend.get_intvar_lb(arg1)

def get_intvar_ub(arg1: "void *") -> "int":
    return _backend.get_intvar_ub(arg1)

def get_constraint_name(arg1: "void *") -> "char *":
    return _backend.get_constraint_name(arg1)

def all_different(arg1: "void *", arg2: "void *") -> "void *":
    return _backend.all_different(arg1, arg2)

def post(arg1: "void *") -> "void":
    return _backend.post(arg1)

def solve(arg1: "void *") -> "void":
    return _backend.solve(arg1)

def create_intvar_array(arg1: "int") -> "void *":
    return _backend.create_intvar_array(arg1)

def intvar_array_length(arg1: "void *") -> "int":
    return _backend.intvar_array_length(arg1)

def intvar_array_set(arg1: "void *", arg2: "void *", arg3: "int") -> "void":
    return _backend.intvar_array_set(arg1, arg2, arg3)


