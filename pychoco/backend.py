# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_backend', [dirname(__file__)])
        except ImportError:
            import _backend
            return _backend
        if fp is not None:
            try:
                _mod = imp.load_module('_backend', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _backend = swig_import_helper()
    del swig_import_helper
else:
    import _backend
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def chocosolver_init():
  return _backend.chocosolver_init()
chocosolver_init = _backend.chocosolver_init

def chocosolver_cleanup():
  return _backend.chocosolver_cleanup()
chocosolver_cleanup = _backend.chocosolver_cleanup

def chocosolver_is_initialized():
  return _backend.chocosolver_is_initialized()
chocosolver_is_initialized = _backend.chocosolver_is_initialized

def create_model():
  return _backend.create_model()
create_model = _backend.create_model

def create_model_s(*args):
  return _backend.create_model_s(*args)
create_model_s = _backend.create_model_s

def get_model_name(*args):
  return _backend.get_model_name(*args)
get_model_name = _backend.get_model_name

def get_solver(*args):
  return _backend.get_solver(*args)
get_solver = _backend.get_solver

def solve(*args):
  return _backend.solve(*args)
solve = _backend.solve

def find_solution(*args):
  return _backend.find_solution(*args)
find_solution = _backend.find_solution

def find_all_solutions(*args):
  return _backend.find_all_solutions(*args)
find_all_solutions = _backend.find_all_solutions

def find_optimal_solution(*args):
  return _backend.find_optimal_solution(*args)
find_optimal_solution = _backend.find_optimal_solution

def find_all_optimal_solutions(*args):
  return _backend.find_all_optimal_solutions(*args)
find_all_optimal_solutions = _backend.find_all_optimal_solutions

def show_statistics(*args):
  return _backend.show_statistics(*args)
show_statistics = _backend.show_statistics

def show_short_statistics(*args):
  return _backend.show_short_statistics(*args)
show_short_statistics = _backend.show_short_statistics

def get_solution_count(*args):
  return _backend.get_solution_count(*args)
get_solution_count = _backend.get_solution_count

def time_counter(*args):
  return _backend.time_counter(*args)
time_counter = _backend.time_counter

def solution_counter(*args):
  return _backend.solution_counter(*args)
solution_counter = _backend.solution_counter

def node_counter(*args):
  return _backend.node_counter(*args)
node_counter = _backend.node_counter

def fail_counter(*args):
  return _backend.fail_counter(*args)
fail_counter = _backend.fail_counter

def restart_counter(*args):
  return _backend.restart_counter(*args)
restart_counter = _backend.restart_counter

def backtrack_counter(*args):
  return _backend.backtrack_counter(*args)
backtrack_counter = _backend.backtrack_counter

def get_int_val(*args):
  return _backend.get_int_val(*args)
get_int_val = _backend.get_int_val

def get_variable_name(*args):
  return _backend.get_variable_name(*args)
get_variable_name = _backend.get_variable_name

def is_instantiated(*args):
  return _backend.is_instantiated(*args)
is_instantiated = _backend.is_instantiated

def is_view(*args):
  return _backend.is_view(*args)
is_view = _backend.is_view

def intvar_sii(*args):
  return _backend.intvar_sii(*args)
intvar_sii = _backend.intvar_sii

def intvar_ii(*args):
  return _backend.intvar_ii(*args)
intvar_ii = _backend.intvar_ii

def intvar_s_arr(*args):
  return _backend.intvar_s_arr(*args)
intvar_s_arr = _backend.intvar_s_arr

def intvar_arr(*args):
  return _backend.intvar_arr(*args)
intvar_arr = _backend.intvar_arr

def intvar_i(*args):
  return _backend.intvar_i(*args)
intvar_i = _backend.intvar_i

def intvar_si(*args):
  return _backend.intvar_si(*args)
intvar_si = _backend.intvar_si

def get_intvar_name(*args):
  return _backend.get_intvar_name(*args)
get_intvar_name = _backend.get_intvar_name

def get_intvar_lb(*args):
  return _backend.get_intvar_lb(*args)
get_intvar_lb = _backend.get_intvar_lb

def get_intvar_ub(*args):
  return _backend.get_intvar_ub(*args)
get_intvar_ub = _backend.get_intvar_ub

def get_intvar_value(*args):
  return _backend.get_intvar_value(*args)
get_intvar_value = _backend.get_intvar_value

def has_enumerated_domain(*args):
  return _backend.has_enumerated_domain(*args)
has_enumerated_domain = _backend.has_enumerated_domain

def get_domain_values(*args):
  return _backend.get_domain_values(*args)
get_domain_values = _backend.get_domain_values

def boolvar_s(*args):
  return _backend.boolvar_s(*args)
boolvar_s = _backend.boolvar_s

def boolvar(*args):
  return _backend.boolvar(*args)
boolvar = _backend.boolvar

def boolvar_b(*args):
  return _backend.boolvar_b(*args)
boolvar_b = _backend.boolvar_b

def boolvar_sb(*args):
  return _backend.boolvar_sb(*args)
boolvar_sb = _backend.boolvar_sb

def setvar_s_iviv(*args):
  return _backend.setvar_s_iviv(*args)
setvar_s_iviv = _backend.setvar_s_iviv

def setvar_iviv(*args):
  return _backend.setvar_iviv(*args)
setvar_iviv = _backend.setvar_iviv

def setvar_s_iv(*args):
  return _backend.setvar_s_iv(*args)
setvar_s_iv = _backend.setvar_s_iv

def setvar_iv(*args):
  return _backend.setvar_iv(*args)
setvar_iv = _backend.setvar_iv

def get_setvar_lb(*args):
  return _backend.get_setvar_lb(*args)
get_setvar_lb = _backend.get_setvar_lb

def get_setvar_ub(*args):
  return _backend.get_setvar_ub(*args)
get_setvar_ub = _backend.get_setvar_ub

def get_setvar_value(*args):
  return _backend.get_setvar_value(*args)
get_setvar_value = _backend.get_setvar_value

def create_graphvar(*args):
  return _backend.create_graphvar(*args)
create_graphvar = _backend.create_graphvar

def create_digraphvar(*args):
  return _backend.create_digraphvar(*args)
create_digraphvar = _backend.create_digraphvar

def create_node_induced_graphvar(*args):
  return _backend.create_node_induced_graphvar(*args)
create_node_induced_graphvar = _backend.create_node_induced_graphvar

def create_node_induced_digraphvar(*args):
  return _backend.create_node_induced_digraphvar(*args)
create_node_induced_digraphvar = _backend.create_node_induced_digraphvar

def get_graphvar_lb(*args):
  return _backend.get_graphvar_lb(*args)
get_graphvar_lb = _backend.get_graphvar_lb

def get_graphvar_ub(*args):
  return _backend.get_graphvar_ub(*args)
get_graphvar_ub = _backend.get_graphvar_ub

def get_graphvar_value(*args):
  return _backend.get_graphvar_value(*args)
get_graphvar_value = _backend.get_graphvar_value

def get_constraint_name(*args):
  return _backend.get_constraint_name(*args)
get_constraint_name = _backend.get_constraint_name

def post(*args):
  return _backend.post(*args)
post = _backend.post

def reify(*args):
  return _backend.reify(*args)
reify = _backend.reify

def is_satisfied(*args):
  return _backend.is_satisfied(*args)
is_satisfied = _backend.is_satisfied

def arithm_iv_cst(*args):
  return _backend.arithm_iv_cst(*args)
arithm_iv_cst = _backend.arithm_iv_cst

def arithm_iv_iv(*args):
  return _backend.arithm_iv_iv(*args)
arithm_iv_iv = _backend.arithm_iv_iv

def arithm_iv_iv_cst(*args):
  return _backend.arithm_iv_iv_cst(*args)
arithm_iv_iv_cst = _backend.arithm_iv_iv_cst

def arithm_iv_iv_iv(*args):
  return _backend.arithm_iv_iv_iv(*args)
arithm_iv_iv_iv = _backend.arithm_iv_iv_iv

def member_iv_iarray(*args):
  return _backend.member_iv_iarray(*args)
member_iv_iarray = _backend.member_iv_iarray

def member_iv_i_i(*args):
  return _backend.member_iv_i_i(*args)
member_iv_i_i = _backend.member_iv_i_i

def mod_iv_i_i(*args):
  return _backend.mod_iv_i_i(*args)
mod_iv_i_i = _backend.mod_iv_i_i

def mod_iv_i_iv(*args):
  return _backend.mod_iv_i_iv(*args)
mod_iv_i_iv = _backend.mod_iv_i_iv

def mod_iv_iv_iv(*args):
  return _backend.mod_iv_iv_iv(*args)
mod_iv_iv_iv = _backend.mod_iv_iv_iv

def not_(*args):
  return _backend.not_(*args)
not_ = _backend.not_

def not_member_iv_iarray(*args):
  return _backend.not_member_iv_iarray(*args)
not_member_iv_iarray = _backend.not_member_iv_iarray

def not_member_iv_i_i(*args):
  return _backend.not_member_iv_i_i(*args)
not_member_iv_i_i = _backend.not_member_iv_i_i

def absolute(*args):
  return _backend.absolute(*args)
absolute = _backend.absolute

def distance_iv_iv_i(*args):
  return _backend.distance_iv_iv_i(*args)
distance_iv_iv_i = _backend.distance_iv_iv_i

def distance_iv_iv_iv(*args):
  return _backend.distance_iv_iv_iv(*args)
distance_iv_iv_iv = _backend.distance_iv_iv_iv

def element_iv_iarray_iv_i(*args):
  return _backend.element_iv_iarray_iv_i(*args)
element_iv_iarray_iv_i = _backend.element_iv_iarray_iv_i

def element_iv_ivarray_iv_i(*args):
  return _backend.element_iv_ivarray_iv_i(*args)
element_iv_ivarray_iv_i = _backend.element_iv_ivarray_iv_i

def square(*args):
  return _backend.square(*args)
square = _backend.square

def table(*args):
  return _backend.table(*args)
table = _backend.table

def times_iv_i_iv(*args):
  return _backend.times_iv_i_iv(*args)
times_iv_i_iv = _backend.times_iv_i_iv

def times_iv_iv_i(*args):
  return _backend.times_iv_iv_i(*args)
times_iv_iv_i = _backend.times_iv_iv_i

def times_iv_iv_iv(*args):
  return _backend.times_iv_iv_iv(*args)
times_iv_iv_iv = _backend.times_iv_iv_iv

def pow_(*args):
  return _backend.pow_(*args)
pow_ = _backend.pow_

def div_(*args):
  return _backend.div_(*args)
div_ = _backend.div_

def max_iv_iv_iv(*args):
  return _backend.max_iv_iv_iv(*args)
max_iv_iv_iv = _backend.max_iv_iv_iv

def max_iv_ivarray(*args):
  return _backend.max_iv_ivarray(*args)
max_iv_ivarray = _backend.max_iv_ivarray

def mddc(*args):
  return _backend.mddc(*args)
mddc = _backend.mddc

def min_iv_iv_iv(*args):
  return _backend.min_iv_iv_iv(*args)
min_iv_iv_iv = _backend.min_iv_iv_iv

def min_iv_ivarray(*args):
  return _backend.min_iv_ivarray(*args)
min_iv_ivarray = _backend.min_iv_ivarray

def multi_cost_regular(*args):
  return _backend.multi_cost_regular(*args)
multi_cost_regular = _backend.multi_cost_regular

def all_different(*args):
  return _backend.all_different(*args)
all_different = _backend.all_different

def all_different_except_0(*args):
  return _backend.all_different_except_0(*args)
all_different_except_0 = _backend.all_different_except_0

def all_different_prec_pred_succ(*args):
  return _backend.all_different_prec_pred_succ(*args)
all_different_prec_pred_succ = _backend.all_different_prec_pred_succ

def all_different_prec_prec(*args):
  return _backend.all_different_prec_prec(*args)
all_different_prec_prec = _backend.all_different_prec_prec

def all_equal(*args):
  return _backend.all_equal(*args)
all_equal = _backend.all_equal

def not_all_equal(*args):
  return _backend.not_all_equal(*args)
not_all_equal = _backend.not_all_equal

def among(*args):
  return _backend.among(*args)
among = _backend.among

def and_bv_bv(*args):
  return _backend.and_bv_bv(*args)
and_bv_bv = _backend.and_bv_bv

def and_cs_cs(*args):
  return _backend.and_cs_cs(*args)
and_cs_cs = _backend.and_cs_cs

def at_least_n_values(*args):
  return _backend.at_least_n_values(*args)
at_least_n_values = _backend.at_least_n_values

def at_most_n_values(*args):
  return _backend.at_most_n_values(*args)
at_most_n_values = _backend.at_most_n_values

def bin_packing(*args):
  return _backend.bin_packing(*args)
bin_packing = _backend.bin_packing

def bools_int_channeling(*args):
  return _backend.bools_int_channeling(*args)
bools_int_channeling = _backend.bools_int_channeling

def bits_int_channeling(*args):
  return _backend.bits_int_channeling(*args)
bits_int_channeling = _backend.bits_int_channeling

def clauses_int_channeling(*args):
  return _backend.clauses_int_channeling(*args)
clauses_int_channeling = _backend.clauses_int_channeling

def circuit(*args):
  return _backend.circuit(*args)
circuit = _backend.circuit

def cost_regular(*args):
  return _backend.cost_regular(*args)
cost_regular = _backend.cost_regular

def count_i(*args):
  return _backend.count_i(*args)
count_i = _backend.count_i

def count_iv(*args):
  return _backend.count_iv(*args)
count_iv = _backend.count_iv

def cumulative(*args):
  return _backend.cumulative(*args)
cumulative = _backend.cumulative

def diff_n(*args):
  return _backend.diff_n(*args)
diff_n = _backend.diff_n

def decreasing(*args):
  return _backend.decreasing(*args)
decreasing = _backend.decreasing

def increasing(*args):
  return _backend.increasing(*args)
increasing = _backend.increasing

def global_cardinality(*args):
  return _backend.global_cardinality(*args)
global_cardinality = _backend.global_cardinality

def inverse_channeling(*args):
  return _backend.inverse_channeling(*args)
inverse_channeling = _backend.inverse_channeling

def int_value_precede_chain(*args):
  return _backend.int_value_precede_chain(*args)
int_value_precede_chain = _backend.int_value_precede_chain

def keysort(*args):
  return _backend.keysort(*args)
keysort = _backend.keysort

def knapsack(*args):
  return _backend.knapsack(*args)
knapsack = _backend.knapsack

def lex_chain_less(*args):
  return _backend.lex_chain_less(*args)
lex_chain_less = _backend.lex_chain_less

def lex_chain_less_eq(*args):
  return _backend.lex_chain_less_eq(*args)
lex_chain_less_eq = _backend.lex_chain_less_eq

def lex_less(*args):
  return _backend.lex_less(*args)
lex_less = _backend.lex_less

def lex_less_eq(*args):
  return _backend.lex_less_eq(*args)
lex_less_eq = _backend.lex_less_eq

def argmax(*args):
  return _backend.argmax(*args)
argmax = _backend.argmax

def argmin(*args):
  return _backend.argmin(*args)
argmin = _backend.argmin

def n_values(*args):
  return _backend.n_values(*args)
n_values = _backend.n_values

def or_bv_bv(*args):
  return _backend.or_bv_bv(*args)
or_bv_bv = _backend.or_bv_bv

def or_cs_cs(*args):
  return _backend.or_cs_cs(*args)
or_cs_cs = _backend.or_cs_cs

def path(*args):
  return _backend.path(*args)
path = _backend.path

def regular(*args):
  return _backend.regular(*args)
regular = _backend.regular

def scalar_i(*args):
  return _backend.scalar_i(*args)
scalar_i = _backend.scalar_i

def scalar_iv(*args):
  return _backend.scalar_iv(*args)
scalar_iv = _backend.scalar_iv

def sort(*args):
  return _backend.sort(*args)
sort = _backend.sort

def sub_circuit(*args):
  return _backend.sub_circuit(*args)
sub_circuit = _backend.sub_circuit

def sub_path(*args):
  return _backend.sub_path(*args)
sub_path = _backend.sub_path

def sum_iv_i(*args):
  return _backend.sum_iv_i(*args)
sum_iv_i = _backend.sum_iv_i

def sum_iv_iv(*args):
  return _backend.sum_iv_iv(*args)
sum_iv_iv = _backend.sum_iv_iv

def sum_ivarray_ivarray(*args):
  return _backend.sum_ivarray_ivarray(*args)
sum_ivarray_ivarray = _backend.sum_ivarray_ivarray

def sum_bv_i(*args):
  return _backend.sum_bv_i(*args)
sum_bv_i = _backend.sum_bv_i

def sum_bv_iv(*args):
  return _backend.sum_bv_iv(*args)
sum_bv_iv = _backend.sum_bv_iv

def tree(*args):
  return _backend.tree(*args)
tree = _backend.tree

def set_union_ints(*args):
  return _backend.set_union_ints(*args)
set_union_ints = _backend.set_union_ints

def set_union(*args):
  return _backend.set_union(*args)
set_union = _backend.set_union

def set_union_indices(*args):
  return _backend.set_union_indices(*args)
set_union_indices = _backend.set_union_indices

def set_intersection(*args):
  return _backend.set_intersection(*args)
set_intersection = _backend.set_intersection

def set_subset_eq(*args):
  return _backend.set_subset_eq(*args)
set_subset_eq = _backend.set_subset_eq

def set_nb_empty(*args):
  return _backend.set_nb_empty(*args)
set_nb_empty = _backend.set_nb_empty

def set_offset(*args):
  return _backend.set_offset(*args)
set_offset = _backend.set_offset

def set_not_empty(*args):
  return _backend.set_not_empty(*args)
set_not_empty = _backend.set_not_empty

def set_sum(*args):
  return _backend.set_sum(*args)
set_sum = _backend.set_sum

def set_sum_elements(*args):
  return _backend.set_sum_elements(*args)
set_sum_elements = _backend.set_sum_elements

def set_max(*args):
  return _backend.set_max(*args)
set_max = _backend.set_max

def set_max_indices(*args):
  return _backend.set_max_indices(*args)
set_max_indices = _backend.set_max_indices

def set_min(*args):
  return _backend.set_min(*args)
set_min = _backend.set_min

def set_min_indices(*args):
  return _backend.set_min_indices(*args)
set_min_indices = _backend.set_min_indices

def set_bools_channeling(*args):
  return _backend.set_bools_channeling(*args)
set_bools_channeling = _backend.set_bools_channeling

def set_ints_channeling(*args):
  return _backend.set_ints_channeling(*args)
set_ints_channeling = _backend.set_ints_channeling

def set_disjoint(*args):
  return _backend.set_disjoint(*args)
set_disjoint = _backend.set_disjoint

def set_all_disjoint(*args):
  return _backend.set_all_disjoint(*args)
set_all_disjoint = _backend.set_all_disjoint

def set_all_different(*args):
  return _backend.set_all_different(*args)
set_all_different = _backend.set_all_different

def set_all_equal(*args):
  return _backend.set_all_equal(*args)
set_all_equal = _backend.set_all_equal

def set_partition(*args):
  return _backend.set_partition(*args)
set_partition = _backend.set_partition

def set_inverse_set(*args):
  return _backend.set_inverse_set(*args)
set_inverse_set = _backend.set_inverse_set

def set_symmetric(*args):
  return _backend.set_symmetric(*args)
set_symmetric = _backend.set_symmetric

def set_element(*args):
  return _backend.set_element(*args)
set_element = _backend.set_element

def set_member_set(*args):
  return _backend.set_member_set(*args)
set_member_set = _backend.set_member_set

def set_member_int(*args):
  return _backend.set_member_int(*args)
set_member_int = _backend.set_member_int

def set_not_member_int(*args):
  return _backend.set_not_member_int(*args)
set_not_member_int = _backend.set_not_member_int

def set_le(*args):
  return _backend.set_le(*args)
set_le = _backend.set_le

def set_lt(*args):
  return _backend.set_lt(*args)
set_lt = _backend.set_lt

def bool_not_view(*args):
  return _backend.bool_not_view(*args)
bool_not_view = _backend.bool_not_view

def set_bool_view(*args):
  return _backend.set_bool_view(*args)
set_bool_view = _backend.set_bool_view

def set_bools_view(*args):
  return _backend.set_bools_view(*args)
set_bools_view = _backend.set_bools_view

def int_offset_view(*args):
  return _backend.int_offset_view(*args)
int_offset_view = _backend.int_offset_view

def int_minus_view(*args):
  return _backend.int_minus_view(*args)
int_minus_view = _backend.int_minus_view

def int_scale_view(*args):
  return _backend.int_scale_view(*args)
int_scale_view = _backend.int_scale_view

def int_abs_view(*args):
  return _backend.int_abs_view(*args)
int_abs_view = _backend.int_abs_view

def int_affine_view(*args):
  return _backend.int_affine_view(*args)
int_affine_view = _backend.int_affine_view

def int_eq_view(*args):
  return _backend.int_eq_view(*args)
int_eq_view = _backend.int_eq_view

def int_ne_view(*args):
  return _backend.int_ne_view(*args)
int_ne_view = _backend.int_ne_view

def int_le_view(*args):
  return _backend.int_le_view(*args)
int_le_view = _backend.int_le_view

def int_ge_view(*args):
  return _backend.int_ge_view(*args)
int_ge_view = _backend.int_ge_view

def bools_set_view(*args):
  return _backend.bools_set_view(*args)
bools_set_view = _backend.bools_set_view

def ints_set_view(*args):
  return _backend.ints_set_view(*args)
ints_set_view = _backend.ints_set_view

def set_union_view(*args):
  return _backend.set_union_view(*args)
set_union_view = _backend.set_union_view

def set_intersection_view(*args):
  return _backend.set_intersection_view(*args)
set_intersection_view = _backend.set_intersection_view

def set_difference_view(*args):
  return _backend.set_difference_view(*args)
set_difference_view = _backend.set_difference_view

def graph_node_set_view(*args):
  return _backend.graph_node_set_view(*args)
graph_node_set_view = _backend.graph_node_set_view

def graph_successors_set_view(*args):
  return _backend.graph_successors_set_view(*args)
graph_successors_set_view = _backend.graph_successors_set_view

def graph_predecessors_set_view(*args):
  return _backend.graph_predecessors_set_view(*args)
graph_predecessors_set_view = _backend.graph_predecessors_set_view

def graph_neighbors_set_view(*args):
  return _backend.graph_neighbors_set_view(*args)
graph_neighbors_set_view = _backend.graph_neighbors_set_view

def node_induced_subgraph_view(*args):
  return _backend.node_induced_subgraph_view(*args)
node_induced_subgraph_view = _backend.node_induced_subgraph_view

def edge_induced_subgraph_view(*args):
  return _backend.edge_induced_subgraph_view(*args)
edge_induced_subgraph_view = _backend.edge_induced_subgraph_view

def graph_union_view(*args):
  return _backend.graph_union_view(*args)
graph_union_view = _backend.graph_union_view

def graph_nb_nodes(*args):
  return _backend.graph_nb_nodes(*args)
graph_nb_nodes = _backend.graph_nb_nodes

def graph_nb_edges(*args):
  return _backend.graph_nb_edges(*args)
graph_nb_edges = _backend.graph_nb_edges

def graph_loop_set(*args):
  return _backend.graph_loop_set(*args)
graph_loop_set = _backend.graph_loop_set

def graph_nb_loops(*args):
  return _backend.graph_nb_loops(*args)
graph_nb_loops = _backend.graph_nb_loops

def graph_symmetric(*args):
  return _backend.graph_symmetric(*args)
graph_symmetric = _backend.graph_symmetric

def graph_anti_symmetric(*args):
  return _backend.graph_anti_symmetric(*args)
graph_anti_symmetric = _backend.graph_anti_symmetric

def graph_transitivity(*args):
  return _backend.graph_transitivity(*args)
graph_transitivity = _backend.graph_transitivity

def graph_subgraph(*args):
  return _backend.graph_subgraph(*args)
graph_subgraph = _backend.graph_subgraph

def graph_nodes_channeling_set(*args):
  return _backend.graph_nodes_channeling_set(*args)
graph_nodes_channeling_set = _backend.graph_nodes_channeling_set

def graph_nodes_channeling_bools(*args):
  return _backend.graph_nodes_channeling_bools(*args)
graph_nodes_channeling_bools = _backend.graph_nodes_channeling_bools

def graph_node_channeling(*args):
  return _backend.graph_node_channeling(*args)
graph_node_channeling = _backend.graph_node_channeling

def graph_edge_channeling(*args):
  return _backend.graph_edge_channeling(*args)
graph_edge_channeling = _backend.graph_edge_channeling

def graph_neighbors_channeling_sets(*args):
  return _backend.graph_neighbors_channeling_sets(*args)
graph_neighbors_channeling_sets = _backend.graph_neighbors_channeling_sets

def graph_neighbors_channeling_bools(*args):
  return _backend.graph_neighbors_channeling_bools(*args)
graph_neighbors_channeling_bools = _backend.graph_neighbors_channeling_bools

def graph_neighbors_channeling_node_set(*args):
  return _backend.graph_neighbors_channeling_node_set(*args)
graph_neighbors_channeling_node_set = _backend.graph_neighbors_channeling_node_set

def graph_neighbors_channeling_node_bools(*args):
  return _backend.graph_neighbors_channeling_node_bools(*args)
graph_neighbors_channeling_node_bools = _backend.graph_neighbors_channeling_node_bools

def graph_successors_channeling_sets(*args):
  return _backend.graph_successors_channeling_sets(*args)
graph_successors_channeling_sets = _backend.graph_successors_channeling_sets

def graph_successors_channeling_bools(*args):
  return _backend.graph_successors_channeling_bools(*args)
graph_successors_channeling_bools = _backend.graph_successors_channeling_bools

def graph_successors_channeling_node_set(*args):
  return _backend.graph_successors_channeling_node_set(*args)
graph_successors_channeling_node_set = _backend.graph_successors_channeling_node_set

def graph_successors_channeling_node_bools(*args):
  return _backend.graph_successors_channeling_node_bools(*args)
graph_successors_channeling_node_bools = _backend.graph_successors_channeling_node_bools

def graph_predecessors_channeling_node_set(*args):
  return _backend.graph_predecessors_channeling_node_set(*args)
graph_predecessors_channeling_node_set = _backend.graph_predecessors_channeling_node_set

def graph_predecessors_channeling_node_bools(*args):
  return _backend.graph_predecessors_channeling_node_bools(*args)
graph_predecessors_channeling_node_bools = _backend.graph_predecessors_channeling_node_bools

def graph_min_degree(*args):
  return _backend.graph_min_degree(*args)
graph_min_degree = _backend.graph_min_degree

def graph_min_degrees(*args):
  return _backend.graph_min_degrees(*args)
graph_min_degrees = _backend.graph_min_degrees

def graph_max_degree(*args):
  return _backend.graph_max_degree(*args)
graph_max_degree = _backend.graph_max_degree

def graph_max_degrees(*args):
  return _backend.graph_max_degrees(*args)
graph_max_degrees = _backend.graph_max_degrees

def graph_degrees(*args):
  return _backend.graph_degrees(*args)
graph_degrees = _backend.graph_degrees

def graph_min_in_degree(*args):
  return _backend.graph_min_in_degree(*args)
graph_min_in_degree = _backend.graph_min_in_degree

def graph_min_in_degrees(*args):
  return _backend.graph_min_in_degrees(*args)
graph_min_in_degrees = _backend.graph_min_in_degrees

def graph_max_in_degree(*args):
  return _backend.graph_max_in_degree(*args)
graph_max_in_degree = _backend.graph_max_in_degree

def graph_max_in_degrees(*args):
  return _backend.graph_max_in_degrees(*args)
graph_max_in_degrees = _backend.graph_max_in_degrees

def graph_in_degrees(*args):
  return _backend.graph_in_degrees(*args)
graph_in_degrees = _backend.graph_in_degrees

def graph_min_out_degree(*args):
  return _backend.graph_min_out_degree(*args)
graph_min_out_degree = _backend.graph_min_out_degree

def graph_min_out_degrees(*args):
  return _backend.graph_min_out_degrees(*args)
graph_min_out_degrees = _backend.graph_min_out_degrees

def graph_max_out_degree(*args):
  return _backend.graph_max_out_degree(*args)
graph_max_out_degree = _backend.graph_max_out_degree

def graph_max_out_degrees(*args):
  return _backend.graph_max_out_degrees(*args)
graph_max_out_degrees = _backend.graph_max_out_degrees

def graph_out_degrees(*args):
  return _backend.graph_out_degrees(*args)
graph_out_degrees = _backend.graph_out_degrees

def graph_cycle(*args):
  return _backend.graph_cycle(*args)
graph_cycle = _backend.graph_cycle

def graph_no_cycle(*args):
  return _backend.graph_no_cycle(*args)
graph_no_cycle = _backend.graph_no_cycle

def graph_no_circuit(*args):
  return _backend.graph_no_circuit(*args)
graph_no_circuit = _backend.graph_no_circuit

def graph_connected(*args):
  return _backend.graph_connected(*args)
graph_connected = _backend.graph_connected

def graph_biconnected(*args):
  return _backend.graph_biconnected(*args)
graph_biconnected = _backend.graph_biconnected

def graph_nb_connected_components(*args):
  return _backend.graph_nb_connected_components(*args)
graph_nb_connected_components = _backend.graph_nb_connected_components

def graph_size_connected_components(*args):
  return _backend.graph_size_connected_components(*args)
graph_size_connected_components = _backend.graph_size_connected_components

def graph_size_min_connected_components(*args):
  return _backend.graph_size_min_connected_components(*args)
graph_size_min_connected_components = _backend.graph_size_min_connected_components

def graph_size_max_connected_components(*args):
  return _backend.graph_size_max_connected_components(*args)
graph_size_max_connected_components = _backend.graph_size_max_connected_components

def graph_strongly_connected(*args):
  return _backend.graph_strongly_connected(*args)
graph_strongly_connected = _backend.graph_strongly_connected

def graph_nb_strongly_connected_components(*args):
  return _backend.graph_nb_strongly_connected_components(*args)
graph_nb_strongly_connected_components = _backend.graph_nb_strongly_connected_components

def graph_tree(*args):
  return _backend.graph_tree(*args)
graph_tree = _backend.graph_tree

def graph_forest(*args):
  return _backend.graph_forest(*args)
graph_forest = _backend.graph_forest

def graph_directed_tree(*args):
  return _backend.graph_directed_tree(*args)
graph_directed_tree = _backend.graph_directed_tree

def graph_directed_forest(*args):
  return _backend.graph_directed_forest(*args)
graph_directed_forest = _backend.graph_directed_forest

def graph_reachability(*args):
  return _backend.graph_reachability(*args)
graph_reachability = _backend.graph_reachability

def graph_nb_cliques(*args):
  return _backend.graph_nb_cliques(*args)
graph_nb_cliques = _backend.graph_nb_cliques

def graph_diameter(*args):
  return _backend.graph_diameter(*args)
graph_diameter = _backend.graph_diameter

def create_intvar_array(*args):
  return _backend.create_intvar_array(*args)
create_intvar_array = _backend.create_intvar_array

def intvar_array_length(*args):
  return _backend.intvar_array_length(*args)
intvar_array_length = _backend.intvar_array_length

def intvar_array_set(*args):
  return _backend.intvar_array_set(*args)
intvar_array_set = _backend.intvar_array_set

def intvar_array_get(*args):
  return _backend.intvar_array_get(*args)
intvar_array_get = _backend.intvar_array_get

def create_intvar_2d_array(*args):
  return _backend.create_intvar_2d_array(*args)
create_intvar_2d_array = _backend.create_intvar_2d_array

def intvar_2d_array_length(*args):
  return _backend.intvar_2d_array_length(*args)
intvar_2d_array_length = _backend.intvar_2d_array_length

def intvar_2d_array_set(*args):
  return _backend.intvar_2d_array_set(*args)
intvar_2d_array_set = _backend.intvar_2d_array_set

def create_task_array(*args):
  return _backend.create_task_array(*args)
create_task_array = _backend.create_task_array

def task_array_length(*args):
  return _backend.task_array_length(*args)
task_array_length = _backend.task_array_length

def task_array_set(*args):
  return _backend.task_array_set(*args)
task_array_set = _backend.task_array_set

def create_boolvar_array(*args):
  return _backend.create_boolvar_array(*args)
create_boolvar_array = _backend.create_boolvar_array

def boolvar_array_set(*args):
  return _backend.boolvar_array_set(*args)
boolvar_array_set = _backend.boolvar_array_set

def create_boolvar_2d_array(*args):
  return _backend.create_boolvar_2d_array(*args)
create_boolvar_2d_array = _backend.create_boolvar_2d_array

def boolvar_2d_array_set(*args):
  return _backend.boolvar_2d_array_set(*args)
boolvar_2d_array_set = _backend.boolvar_2d_array_set

def create_setvar_array(*args):
  return _backend.create_setvar_array(*args)
create_setvar_array = _backend.create_setvar_array

def setvar_array_length(*args):
  return _backend.setvar_array_length(*args)
setvar_array_length = _backend.setvar_array_length

def setvar_array_set(*args):
  return _backend.setvar_array_set(*args)
setvar_array_set = _backend.setvar_array_set

def create_graphvar_array(*args):
  return _backend.create_graphvar_array(*args)
create_graphvar_array = _backend.create_graphvar_array

def graphvar_array_set(*args):
  return _backend.graphvar_array_set(*args)
graphvar_array_set = _backend.graphvar_array_set

def create_constraint_array(*args):
  return _backend.create_constraint_array(*args)
create_constraint_array = _backend.create_constraint_array

def constraint_array_set(*args):
  return _backend.constraint_array_set(*args)
constraint_array_set = _backend.constraint_array_set

def create_int_array(*args):
  return _backend.create_int_array(*args)
create_int_array = _backend.create_int_array

def int_array_length(*args):
  return _backend.int_array_length(*args)
int_array_length = _backend.int_array_length

def int_array_set(*args):
  return _backend.int_array_set(*args)
int_array_set = _backend.int_array_set

def int_array_get(*args):
  return _backend.int_array_get(*args)
int_array_get = _backend.int_array_get

def create_int_2d_array(*args):
  return _backend.create_int_2d_array(*args)
create_int_2d_array = _backend.create_int_2d_array

def int_2d_array_length(*args):
  return _backend.int_2d_array_length(*args)
int_2d_array_length = _backend.int_2d_array_length

def int_2d_array_set(*args):
  return _backend.int_2d_array_set(*args)
int_2d_array_set = _backend.int_2d_array_set

def create_int_3d_array(*args):
  return _backend.create_int_3d_array(*args)
create_int_3d_array = _backend.create_int_3d_array

def int_3d_array_length(*args):
  return _backend.int_3d_array_length(*args)
int_3d_array_length = _backend.int_3d_array_length

def int_3d_array_set(*args):
  return _backend.int_3d_array_set(*args)
int_3d_array_set = _backend.int_3d_array_set

def create_int_4d_array(*args):
  return _backend.create_int_4d_array(*args)
create_int_4d_array = _backend.create_int_4d_array

def int_4d_array_length(*args):
  return _backend.int_4d_array_length(*args)
int_4d_array_length = _backend.int_4d_array_length

def int_4d_array_set(*args):
  return _backend.int_4d_array_set(*args)
int_4d_array_set = _backend.int_4d_array_set

def create_criterion_array(*args):
  return _backend.create_criterion_array(*args)
create_criterion_array = _backend.create_criterion_array

def criterion_array_set(*args):
  return _backend.criterion_array_set(*args)
criterion_array_set = _backend.criterion_array_set

def array_length(*args):
  return _backend.array_length(*args)
array_length = _backend.array_length

def list_size(*args):
  return _backend.list_size(*args)
list_size = _backend.list_size

def list_solution_get(*args):
  return _backend.list_solution_get(*args)
list_solution_get = _backend.list_solution_get

def set_random_search(*args):
  return _backend.set_random_search(*args)
set_random_search = _backend.set_random_search

def set_dom_over_w_deg_search(*args):
  return _backend.set_dom_over_w_deg_search(*args)
set_dom_over_w_deg_search = _backend.set_dom_over_w_deg_search

def set_dom_over_w_deg_ref_search(*args):
  return _backend.set_dom_over_w_deg_ref_search(*args)
set_dom_over_w_deg_ref_search = _backend.set_dom_over_w_deg_ref_search

def set_activity_based_search(*args):
  return _backend.set_activity_based_search(*args)
set_activity_based_search = _backend.set_activity_based_search

def set_min_dom_lb_search(*args):
  return _backend.set_min_dom_lb_search(*args)
set_min_dom_lb_search = _backend.set_min_dom_lb_search

def set_min_dom_ub_search(*args):
  return _backend.set_min_dom_ub_search(*args)
set_min_dom_ub_search = _backend.set_min_dom_ub_search

def set_conflict_history_search(*args):
  return _backend.set_conflict_history_search(*args)
set_conflict_history_search = _backend.set_conflict_history_search

def set_default_search(*args):
  return _backend.set_default_search(*args)
set_default_search = _backend.set_default_search

def set_input_order_lb_search(*args):
  return _backend.set_input_order_lb_search(*args)
set_input_order_lb_search = _backend.set_input_order_lb_search

def set_input_order_ub_search(*args):
  return _backend.set_input_order_ub_search(*args)
set_input_order_ub_search = _backend.set_input_order_ub_search

def set_failure_length_based_search(*args):
  return _backend.set_failure_length_based_search(*args)
set_failure_length_based_search = _backend.set_failure_length_based_search

def set_failure_rate_based_search(*args):
  return _backend.set_failure_rate_based_search(*args)
set_failure_rate_based_search = _backend.set_failure_rate_based_search

def create_fa():
  return _backend.create_fa()
create_fa = _backend.create_fa

def create_fa_regexp(*args):
  return _backend.create_fa_regexp(*args)
create_fa_regexp = _backend.create_fa_regexp

def create_fa_regexp_min_max(*args):
  return _backend.create_fa_regexp_min_max(*args)
create_fa_regexp_min_max = _backend.create_fa_regexp_min_max

def create_cost_fa():
  return _backend.create_cost_fa()
create_cost_fa = _backend.create_cost_fa

def create_cost_fa_from_fa(*args):
  return _backend.create_cost_fa_from_fa(*args)
create_cost_fa_from_fa = _backend.create_cost_fa_from_fa

def get_nb_states(*args):
  return _backend.get_nb_states(*args)
get_nb_states = _backend.get_nb_states

def get_nb_symbols(*args):
  return _backend.get_nb_symbols(*args)
get_nb_symbols = _backend.get_nb_symbols

def add_state(*args):
  return _backend.add_state(*args)
add_state = _backend.add_state

def remove_symbol(*args):
  return _backend.remove_symbol(*args)
remove_symbol = _backend.remove_symbol

def add_transition(*args):
  return _backend.add_transition(*args)
add_transition = _backend.add_transition

def delete_transition(*args):
  return _backend.delete_transition(*args)
delete_transition = _backend.delete_transition

def get_initial_state(*args):
  return _backend.get_initial_state(*args)
get_initial_state = _backend.get_initial_state

def is_final(*args):
  return _backend.is_final(*args)
is_final = _backend.is_final

def set_initial_state(*args):
  return _backend.set_initial_state(*args)
set_initial_state = _backend.set_initial_state

def set_final(*args):
  return _backend.set_final(*args)
set_final = _backend.set_final

def set_non_final(*args):
  return _backend.set_non_final(*args)
set_non_final = _backend.set_non_final

def cost_fa_add_counter(*args):
  return _backend.cost_fa_add_counter(*args)
cost_fa_add_counter = _backend.cost_fa_add_counter

def fa_union(*args):
  return _backend.fa_union(*args)
fa_union = _backend.fa_union

def fa_minimize(*args):
  return _backend.fa_minimize(*args)
fa_minimize = _backend.fa_minimize

def fa_complement(*args):
  return _backend.fa_complement(*args)
fa_complement = _backend.fa_complement

def create_counter_state(*args):
  return _backend.create_counter_state(*args)
create_counter_state = _backend.create_counter_state

def make_single_resource_ii(*args):
  return _backend.make_single_resource_ii(*args)
make_single_resource_ii = _backend.make_single_resource_ii

def make_single_resource_iii(*args):
  return _backend.make_single_resource_iii(*args)
make_single_resource_iii = _backend.make_single_resource_iii

def make_multi_resources_iii(*args):
  return _backend.make_multi_resources_iii(*args)
make_multi_resources_iii = _backend.make_multi_resources_iii

def make_multi_resources_iiii(*args):
  return _backend.make_multi_resources_iiii(*args)
make_multi_resources_iiii = _backend.make_multi_resources_iiii

def create_task_iv_i(*args):
  return _backend.create_task_iv_i(*args)
create_task_iv_i = _backend.create_task_iv_i

def create_task_iv_i_iv(*args):
  return _backend.create_task_iv_i_iv(*args)
create_task_iv_i_iv = _backend.create_task_iv_i_iv

def create_task_iv_iv_iv(*args):
  return _backend.create_task_iv_iv_iv(*args)
create_task_iv_iv_iv = _backend.create_task_iv_iv_iv

def task_ensure_bound_consistency(*args):
  return _backend.task_ensure_bound_consistency(*args)
task_ensure_bound_consistency = _backend.task_ensure_bound_consistency

def task_get_start(*args):
  return _backend.task_get_start(*args)
task_get_start = _backend.task_get_start

def task_get_end(*args):
  return _backend.task_get_end(*args)
task_get_end = _backend.task_get_end

def task_get_duration(*args):
  return _backend.task_get_duration(*args)
task_get_duration = _backend.task_get_duration

def create_mdd_tuples(*args):
  return _backend.create_mdd_tuples(*args)
create_mdd_tuples = _backend.create_mdd_tuples

def create_mdd_transitions(*args):
  return _backend.create_mdd_transitions(*args)
create_mdd_transitions = _backend.create_mdd_transitions

def create_graph(*args):
  return _backend.create_graph(*args)
create_graph = _backend.create_graph

def create_digraph(*args):
  return _backend.create_digraph(*args)
create_digraph = _backend.create_digraph

def get_nodes(*args):
  return _backend.get_nodes(*args)
get_nodes = _backend.get_nodes

def add_node(*args):
  return _backend.add_node(*args)
add_node = _backend.add_node

def remove_node(*args):
  return _backend.remove_node(*args)
remove_node = _backend.remove_node

def add_edge(*args):
  return _backend.add_edge(*args)
add_edge = _backend.add_edge

def remove_edge(*args):
  return _backend.remove_edge(*args)
remove_edge = _backend.remove_edge

def get_nb_max_nodes(*args):
  return _backend.get_nb_max_nodes(*args)
get_nb_max_nodes = _backend.get_nb_max_nodes

def get_node_set_type(*args):
  return _backend.get_node_set_type(*args)
get_node_set_type = _backend.get_node_set_type

def get_edge_set_type(*args):
  return _backend.get_edge_set_type(*args)
get_edge_set_type = _backend.get_edge_set_type

def contains_node(*args):
  return _backend.contains_node(*args)
contains_node = _backend.contains_node

def contains_edge(*args):
  return _backend.contains_edge(*args)
contains_edge = _backend.contains_edge

def is_directed(*args):
  return _backend.is_directed(*args)
is_directed = _backend.is_directed

def get_successors_of(*args):
  return _backend.get_successors_of(*args)
get_successors_of = _backend.get_successors_of

def get_predecessors_of(*args):
  return _backend.get_predecessors_of(*args)
get_predecessors_of = _backend.get_predecessors_of

def graphviz_export(*args):
  return _backend.graphviz_export(*args)
graphviz_export = _backend.graphviz_export

def chocosolver_handles_destroy(*args):
  return _backend.chocosolver_handles_destroy(*args)
chocosolver_handles_destroy = _backend.chocosolver_handles_destroy
# This file is compatible with both classic and new-style classes.


